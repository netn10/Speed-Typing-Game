{"version":3,"sources":["components/Toggle.js","components/DarkModeToggle.js","components/Header.js","components/Body.js","components/GamePiece.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","checked","onChange","className","type","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","value","toggle","enable","Nav","styled","div","NavHeader","NavLeft","NavCenter","Input","input","NavRight","Header","placeholder","Body","GamePiece","text","speed","element_id","setTimeout","console","log","document","getElementById","setAttribute","style","animation","GameBoard","all_pieces","map","data","index","useEffect","game_txt","addEventListener","Check","e","keyCode","Button","variant","color","inputProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yWAeeA,EAbA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACX,0BAAMC,UAAU,kBACZ,2BACIA,UAAU,UACVC,KAAK,WACLH,QAASA,EACTC,SAAUA,EACVG,GAAG,YAEP,2BAAOC,QAAQ,c,QCWRC,G,MAhBQ,WACnB,IAAMC,EAAWC,aAAY,GAE7B,OACI,yBAAKN,UAAU,oBACX,4BAAQC,KAAK,SAASM,QAASF,EAASG,SAAxC,UAGA,kBAAC,EAAD,CAAQV,QAASO,EAASI,MAAOV,SAAUM,EAASK,SACpD,4BAAQT,KAAK,SAASM,QAASF,EAASM,QAAxC,a,klCCVZ,IAAMC,EAAMC,IAAOC,IAAV,KAKHC,EAAYF,IAAOC,IAAV,KASTE,EAAUH,IAAOC,IAAV,KAKPG,EAAYJ,IAAOC,IAAV,KAKTI,EAAQL,IAAOM,MAAV,KAoBLC,EAAWP,IAAOC,IAAV,KA4BCO,MAlBf,WACE,OACE,kBAACT,EAAD,CAAKZ,UAAU,UACb,kBAACe,EAAD,KACE,kBAACC,EAAD,0BAEA,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAOjB,KAAK,OAAOqB,YAAY,YAGjC,kBAACF,EAAD,KACE,kBAAC,EAAD,UC5DKG,MARf,WACI,OACI,6BACI,+D,8BCmBGC,MArBf,YAAyC,IAApBtB,EAAmB,EAAnBA,GAAIuB,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAEvBC,EAAazB,EAAK,SAUtB,OAFc0B,YAPG,WACbC,QAAQC,IAAIL,EAAO,UACnBE,EAAaI,SAASC,eAAeL,IAC1BM,aAAa,KAAM/B,EAAK,qBAGX,IAARwB,EAAe,KAI/B,yBAAK1B,UAAU,cACX,6BACI,uBAAGE,GAAIyB,EAAYO,MAAO,CAAEC,UAAU,WAAD,OAAaT,EAAb,uBAA0CD,MCuBhFW,MAnCf,WACI,IAEIC,EAFW,CAAC,CAAEZ,KAAM,QAASC,MAAO,GAAK,CAAED,KAAM,KAAMC,MAAO,GAAK,CAAED,KAAM,OAAQC,MAAO,IAEpEY,KAAI,SAACC,EAAMC,GAAP,OAC1B,kBAAC,EAAD,CAAWtC,GAAIsC,EAAOf,KAAMc,EAAKd,KAAMC,MAAOa,EAAKb,WAevD,OAZAe,qBAAU,WACN,IAAIC,EAAWX,SAASC,eAAe,YAEvCU,EAASC,iBAAiB,UAAWC,GACrC,IAAIA,EAAQ,SAAUC,GAClBhB,QAAQC,IAAI,MACM,KAAde,EAAEC,UACFJ,EAAS,GAAGjC,MAAQ,QAM5B,oCACI,yBAAKT,UAAU,aACVqC,GAEL,yBAAKrC,UAAU,cACX,kBAAC+C,EAAA,EAAD,CAAQ/C,UAAU,iBAAiBgD,QAAQ,YAAYC,MAAM,WAA7D,cAGA,6BACA,kBAAC,IAAD,CAAO/C,GAAG,WAAWF,UAAU,WAAWsB,YAAY,6BAA6B4B,WAAY,CAAE,aAAc,oB,MCfhHC,MAZf,WACE,OACE,oCACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDyHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.a8a9e09a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Toggle = ({ checked, onChange }) => (\r\n    <span className=\"toggle-control\">\r\n        <input\r\n            className=\"dmcheck\"\r\n            type=\"checkbox\"\r\n            checked={checked}\r\n            onChange={onChange}\r\n            id=\"dmcheck\"\r\n        />\r\n        <label htmlFor=\"dmcheck\" />\r\n    </span>\r\n);\r\n\r\nexport default Toggle;\r\n","import React from 'react';\r\n\r\nimport Toggle from './Toggle';\r\nimport useDarkMode from 'use-dark-mode';\r\nimport \"./DarkModeToggle.css\"\r\n\r\nconst DarkModeToggle = () => {\r\n    const darkMode = useDarkMode(false);\r\n\r\n    return (\r\n        <div className=\"dark-mode-toggle\">\r\n            <button type=\"button\" onClick={darkMode.disable}>\r\n                ☀\r\n      </button>\r\n            <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\r\n            <button type=\"button\" onClick={darkMode.enable}>\r\n                ☾\r\n      </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DarkModeToggle;\r\n","// Header.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport DarkModeToggle from './DarkModeToggle';\r\n\r\nconst Nav = styled.div`\r\n  background-color: #fff;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\r\n`;\r\n\r\nconst NavHeader = styled.div`\r\n  max-width: 1010px;\r\n  padding: 26px 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NavLeft = styled.div`\r\n  width: 33.333%;\r\n  text-align: left;\r\n`;\r\n\r\nconst NavCenter = styled.div`\r\n  width: 33.333%;\r\n  text-align: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 16px;\r\n  border: solid 1px #dbdbdb;\r\n  border-radius: 3px;\r\n  color: #262626;\r\n  padding: 7px 33px;\r\n  border-radius: 3px;\r\n  color: #999;\r\n  cursor: text;\r\n  font-size: 14px;\r\n  font-weight: 300;\r\n  text-align: center;\r\n  background: #fafafa;\r\n \r\n  &:active,\r\n  &:focus {\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nconst NavRight = styled.div`\r\n  width: 33.333%;\r\n  text-align: right;\r\n \r\n  svg {\r\n    margin-right: 20px;\r\n  }\r\n`;\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <Nav className=\"Header\">\r\n      <NavHeader>\r\n        <NavLeft>Speed Typing Game</NavLeft>\r\n\r\n        <NavCenter>\r\n          <Input type=\"text\" placeholder=\"Search\" />\r\n        </NavCenter>\r\n\r\n        <NavRight>\r\n          <DarkModeToggle />\r\n        </NavRight>\r\n      </NavHeader>\r\n    </Nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction Body() {\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Speed Typing Game!</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import React from 'react'\r\nimport \"./GamePiece.css\"\r\n\r\nfunction GamePiece({ id, text, speed }) {\r\n\r\n    var element_id = id + \"_piece\"\r\n    var time_is_up = function () {\r\n        console.log(text + \" done\")\r\n        element_id = document.getElementById(element_id);\r\n        element_id.setAttribute(\"id\", id + \"_piece_finished\");\r\n    }\r\n\r\n    var timeout_speed = speed * 1000 - 500;\r\n    var timeout = setTimeout(time_is_up, timeout_speed);\r\n\r\n    return (\r\n        <div className=\"game-piece\">\r\n            <div>\r\n                <p id={element_id} style={{ animation: `marquee ${speed}s linear forwards` }}>{text}</p>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default GamePiece\r\n","import React, { useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport { Input } from '@material-ui/core';\r\nimport GamePiece from './GamePiece';\r\n\r\nfunction GameBoard() {\r\n    var all_data = [{ text: \"Hello\", speed: 6 }, { text: \"my\", speed: 2 }, { text: \"TEST\", speed: 3 }];\r\n\r\n    var all_pieces = all_data.map((data, index) =>\r\n        <GamePiece id={index} text={data.text} speed={data.speed} />\r\n    )\r\n\r\n    useEffect(() => {\r\n        var game_txt = document.getElementById('game_txt')\r\n\r\n        game_txt.addEventListener(\"onKeyUp\", Check);\r\n        var Check = function (e) {\r\n            console.log(\"hi\")\r\n            if (e.keyCode === 13) {\r\n                game_txt[0].value = \"\";\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"gameBoard\">\r\n                {all_pieces}\r\n            </div>\r\n            <div className=\"buttonsRow\">\r\n                <Button className=\"start_game_btn\" variant=\"contained\" color=\"primary\">\r\n                    Start Game\r\n                </Button >\r\n                <br />\r\n                <Input id=\"game_txt\" className=\"game_txt\" placeholder=\"Write Here and Press Enter\" inputProps={{ 'aria-label': 'description' }} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameBoard\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport GameBoard from './components/GameBoard'\n\nimport './styles.scss';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <Header />\n        <Body />\n        <GameBoard />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}